version: '3'
services:
  # Connection address:jdbc:mysql://localhost:3306 username:root  password：ali_dbhub port：3306 Default database：ali_dbhub_test
  mysql:
    image: mysql:latest
    restart: always
    container_name: mysql-latest
    environment:
      MYSQL_ROOT_PASSWORD: ali_dbhub
      MYSQL_DATABASE: ali_dbhub_test
      TZ: Asia/Shanghai
    ports:
      - 3306:3306
  # Connection address:jdbc:postgresql://localhost:5432/ali_dbhub_test, username:ali_dbhub, password:ali_dbhub port：5432 Default database：ali_dbhub_test
  postgres:
    image: postgres:12-alpine
    restart: always
    container_name: postgres-alpine
    environment:
      POSTGRES_USER: ali_dbhub
      POSTGRES_PASSWORD: ali_dbhub
      POSTGRES_DB: ali_dbhub_test
      TZ: Asia/Shanghai
    ports:
      - 5432:5432
  # Connection address:jdbc:oracle:thin:@localhost:1521:XE,  username:system, password:ali_dbhub
  # The default database XEPDB1 will start much faster
  oracle:
    image: gvenzl/oracle-xe:slim-faststart
    restart: always
    container_name: oracle-latest
    environment:
      ORACLE_DATABASE: XEPDB1
      ORACLE_PASSWORD: ali_dbhub
      TZ: Asia/Shanghai
    ports:
      - 1521:1521
  redis:
    image: redis:7
    container_name: redis7
    restart: always
    # Mount mapping, which allows data or configuration to be persisted
    volumes:
      #＜local configuration file＞：
      - $PWD/redis/redis.conf:/etc/redis/redis. conf:ro
      - $PWD/redis/data:/data
      - $PWD/redis/logs:/logs
   # command: redis-server/etc/redis/redis.conf
    ports:
      - 6379:6379
    #service name

    # jdbc:mariadb://localhost:3303 ? user=root&password=ali_dbhub
  mariadb:
    image: mariadb:10.5.5
    container_name: "mariadb1"
    restart: always
    environment:
      MYSQL_USER: "root"
      MYSQL_PASSWORD: "ali_dbhub"
      MYSQL_ROOT_PASSWORD: "ali_dbhub"
      TZ: "Asia/Shanghai"
    ports:
      - "3304:3304"

  clickhouse-server:
    # image：Specify the image, which can be the image name or image id. If the image does not exist locally, compose will try to pull the image.
    image: yandex/clickhouse-server
    # container_name：Specify the container name, which defaults to the format of project name_service name_serial number
    container_name: clickhouse
    # hostname：Specify container hostname
    hostname: clickhouse
    # networks:Configure the network the container is connected to, specifying the networks defined at the end of the file
    # ports：Expose port information in the format of host port:container port; when only the container port is specified, the host will randomly select the port, similar to docker run -p
    ports:
      - "8123:8123"
      - "9000:9000"
      - "9004:9004"
    # expose：The port is exposed but not mapped to the host, so the port cannot be accessed from the outside and can only be accessed and used within the container.
    expose:
      - 9009
    # volumes：Data volume mounting path setting, similar to docker run --volumn=hostdir:containerDir, file permissions can also be specified